---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  priority?: boolean;
  sizes?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '', 
  loading = 'lazy',
  priority = false,
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'
} = Astro.props;

// Generate responsive image URLs for different sizes
const generateResponsiveUrls = (originalSrc: string) => {
  // For external images (like Pexels), we'll use the original URL
  // In a production environment, you might want to use a service like Cloudinary
  if (originalSrc.startsWith('http')) {
    return {
      webp: originalSrc,
      original: originalSrc,
      small: originalSrc,
      medium: originalSrc,
      large: originalSrc
    };
  }
  
  // For local images, generate different sizes
  const baseName = originalSrc.replace(/\.[^/.]+$/, '');
  const extension = originalSrc.split('.').pop();
  
  return {
    webp: `${baseName}.webp`,
    original: originalSrc,
    small: `${baseName}-400.${extension}`,
    medium: `${baseName}-800.${extension}`,
    large: `${baseName}-1200.${extension}`
  };
};

const urls = generateResponsiveUrls(src);
---

<picture class={`image-container ${className}`}>
  <!-- WebP format for modern browsers -->
  <source 
    type="image/webp" 
    srcset={`${urls.webp}?w=400 400w, ${urls.webp}?w=800 800w, ${urls.webp}?w=1200 1200w`}
    sizes={sizes}
  />
  
  <!-- Fallback for browsers that don't support WebP -->
  <img 
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading={priority ? 'eager' : loading}
    decoding="async"
    class={`responsive-image ${className}`}
    style={width && height ? `aspect-ratio: ${width}/${height};` : ''}
  />
</picture>

<style>
  .image-container {
    display: block;
    overflow: hidden;
  }
  
  .responsive-image {
    width: 100%;
    height: auto;
    object-fit: cover;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }
  
  .responsive-image[loading="lazy"] {
    opacity: 0;
    transform: scale(1.05);
  }
  
  .responsive-image.loaded {
    opacity: 1;
    transform: scale(1);
  }
  
  /* Prevent layout shift */
  .responsive-image {
    background-color: #f3f4f6;
  }
</style>

<script>
  // Intersection Observer for lazy loading optimization
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          img.classList.add('loaded');
          imageObserver.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.1
    });
    
    document.querySelectorAll('.responsive-image[loading="lazy"]').forEach(img => {
      imageObserver.observe(img);
    });
  }
</script>